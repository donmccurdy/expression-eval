{"version":3,"file":"expression-eval.js","sources":["../index.js"],"sourcesContent":["import jsep from 'jsep';\n\n/**\n * Evaluation code from JSEP project, under MIT License.\n * Copyright (c) 2013 Stephen Oney, http://jsep.from.so/\n */\n\nconst binops = {\n  '||':  function (a, b) { return a || b; },\n  '&&':  function (a, b) { return a && b; },\n  '|':   function (a, b) { return a | b; },\n  '^':   function (a, b) { return a ^ b; },\n  '&':   function (a, b) { return a & b; },\n  '==':  function (a, b) { return a == b; }, // jshint ignore:line\n  '!=':  function (a, b) { return a != b; }, // jshint ignore:line\n  '===': function (a, b) { return a === b; },\n  '!==': function (a, b) { return a !== b; },\n  '<':   function (a, b) { return a < b; },\n  '>':   function (a, b) { return a > b; },\n  '<=':  function (a, b) { return a <= b; },\n  '>=':  function (a, b) { return a >= b; },\n  '<<':  function (a, b) { return a << b; },\n  '>>':  function (a, b) { return a >> b; },\n  '>>>': function (a, b) { return a >>> b; },\n  '+':   function (a, b) { return a + b; },\n  '-':   function (a, b) { return a - b; },\n  '*':   function (a, b) { return a * b; },\n  '/':   function (a, b) { return a / b; },\n  '%':   function (a, b) { return a % b; }\n};\n\nconst unops = {\n  '-' :  function (a) { return -a; },\n  '+' :  function (a) { return +a; },\n  '~' :  function (a) { return ~a; },\n  '!' :  function (a) { return !a; },\n};\n\nfunction evaluateArray ( list, context ) {\n  return list.map(function (v) { return evaluate(v, context); });\n}\n\nasync function evaluateArrayAsync( list, context ) {\n  const res = await Promise.all(list.map((v) => evalAsync(v, context)));\n  return res;\n}\n\nfunction evaluateMember ( node, context ) {\n  const object = evaluate(node.object, context);\n  if ( node.computed ) {\n    return [object, object[evaluate(node.property, context)]];\n  } else {\n    return [object, object[node.property.name]];\n  }\n}\n\nasync function evaluateMemberAsync( node, context ) {\n  const object = await evalAsync(node.object, context);\n  if (  node.computed) {\n    return [object, object[await evalAsync(node.property, context)]];\n  } else {\n    return [object, object[node.property.name]];\n  }\n}\n\nfunction evaluate ( node, context ) {\n\n  switch ( node.type ) {\n\n    case 'ArrayExpression':\n      return evaluateArray( node.elements, context );\n\n    case 'BinaryExpression':\n      return binops[ node.operator ]( evaluate( node.left, context ), evaluate( node.right, context ) );\n\n    case 'CallExpression':\n      let caller, fn, assign;\n      if (node.callee.type === 'MemberExpression') {\n        assign = evaluateMember( node.callee, context );\n        caller = assign[0];\n        fn = assign[1];\n      } else {\n        fn = evaluate( node.callee, context );\n      }\n      if (typeof fn  !== 'function') { return undefined; }\n      return fn.apply( caller, evaluateArray( node.arguments, context ) );\n\n    case 'ConditionalExpression':\n      return evaluate( node.test, context )\n        ? evaluate( node.consequent, context )\n        : evaluate( node.alternate, context );\n\n    case 'Identifier':\n      return context[node.name];\n\n    case 'Literal':\n      return node.value;\n\n    case 'LogicalExpression':\n      if (node.operator === '||') {\n        return evaluate( node.left, context ) || evaluate( node.right, context );\n      } else if (node.operator === '&&') {\n        return evaluate( node.left, context ) && evaluate( node.right, context );\n      }\n      return binops[ node.operator ]( evaluate( node.left, context ), evaluate( node.right, context ) );\n\n    case 'MemberExpression':\n      return evaluateMember(node, context)[1];\n\n    case 'ThisExpression':\n      return context;\n\n    case 'UnaryExpression':\n      return unops[ node.operator ]( evaluate( node.argument, context ) );\n\n    default:\n      return undefined;\n  }\n\n}\n\nasync function evalAsync( node, context ) {\n\n  switch ( node.type ) {\n\n    case 'ArrayExpression':\n      return await evaluateArrayAsync( node.elements, context );\n\n    case 'BinaryExpression': {\n      const [left, right] = await Promise.all([\n        evalAsync( node.left, context ),\n        evalAsync( node.right, context )\n      ]);\n      return binops[ node.operator ]( left, right );\n    }\n\n    case 'CallExpression':\n      let caller, fn, assign;\n      if (node.callee.type === 'MemberExpression') {\n        assign = await evaluateMemberAsync( node.callee, context );\n        caller = assign[0];\n        fn = assign[1];\n      } else {\n        fn = await evalAsync( node.callee, context );\n      }\n      if (typeof fn !== 'function') {\n        return undefined;\n      }\n      return await fn.apply(\n        caller,\n        await evaluateArrayAsync( node.arguments, context )\n      );\n\n    case 'ConditionalExpression':\n      return (await evalAsync( node.test, context ))\n        ? await evalAsync( node.consequent, context )\n        : await evalAsync( node.alternate, context );\n\n    case 'Identifier':\n      return context[node.name];\n\n    case 'Literal':\n      return node.value;\n\n    case 'LogicalExpression': {\n      if (node.operator === '||') {\n        return (\n          (await evalAsync( node.left, context )) ||\n          (await evalAsync( node.right, context ))\n        );\n      } else if (node.operator === '&&') {\n        return (\n          (await evalAsync( node.left, context )) &&\n          (await evalAsync( node.right, context ))\n        );\n      }\n\n      const [left, right] = await Promise.all([\n        evalAsync( node.left, context ),\n        evalAsync( node.right, context )\n      ]);\n\n      return binops[ node.operator ]( left, right );\n    }\n\n    case 'MemberExpression':\n      return (await evaluateMemberAsync(node, context))[1];\n\n    case 'ThisExpression':\n      return context;\n\n    case 'UnaryExpression':\n      return unops[ node.operator ](await evalAsync( node.argument, context ));\n\n    default:\n      return undefined;\n  }\n}\n\nfunction compile (expression) {\n  return evaluate.bind(null, jsep(expression));\n}\n\nfunction compileAsync(expression) {\n  return evalAsync.bind(null, jsep(expression));\n}\n\n// Added functions to inject Custom Unary Operators (and override existing ones)\nfunction addUnaryOp(operator, _function){\n  jsep.addUnaryOp(operator);\n  unops[operator] = _function;\n}\n\n// Added functions to inject Custom Binary Operators (and override existing ones)\nfunction addBinaryOp(operator, _function){\n  jsep.addBinaryOp(operator);\n  binops[operator] = _function;\n}\n\nexport {\n  jsep as parse,\n  evaluate as eval,\n  evalAsync,\n  compile,\n  compileAsync,\n  addUnaryOp,\n  addBinaryOp\n};\n"],"names":["evalAsync","node","context","fn","_fn","apply","caller","evaluateArrayAsync","arguments","type","elements","Promise","all","left","right","binops","operator","assign","callee","evaluateMemberAsync","test","consequent","alternate","name","value","_evaluateMemberAsync2","unops","argument","undefined","object","computed","property","list","map","v","a","b","evaluateArray","evaluate","evaluateMember","expression","bind","jsep","_function","addUnaryOp","addBinaryOp"],"mappings":"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"}